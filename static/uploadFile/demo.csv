Document Title,Authors,Author Affiliations,Publication Title,Date Added To Xplore,Publication Year,Volume,Issue,Start Page,End Page,Abstract,ISSN,ISBNs,DOI,Funding Information,PDF Link,Author Keywords,IEEE Terms,INSPEC Controlled Terms,INSPEC Non-Controlled Terms,Mesh_Terms,Article Citation Count,Reference Count,License,Online Date,Issue Date,Meeting Date,Publisher,Document Identifier
Keynotes,,,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2019,,,36,38,Provides an abstract for each of the keynote presentations and may include a brief professional biography of each presenter. The complete presentations were not made available for publication as part of the conference proceedings.,,,10.1109/ASE.2019.00010,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952191,,,,,,,,,,,,IEEE,IEEE Conferences
Big problems in industry (panel),J. Penix,Google| USA,2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2013,,,3,3,Software Engineering in practice deals with scale in a variety of dimensions. We build large scale systems operating on vast amount of data. We have millions of customers with billions of queries and transactions. We have distributed teams making thousands of changes| running millions of tests and releasing multiple times per day. These dimensions of scale interact to provide challenges for software development tools and processes. The panelists will describe the challenging aspects of scale in their specific problem domains and discuss which software engineering methods work and which leave room for improvement.,,,10.1109/ASE.2013.6693060,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6693060,,,,,,1,,,,,,IEEE,IEEE Conferences
Toward Practical Automatic Program Repair,A. Ghanbari,University of Texas at Dallas,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2019,,,1262,1264,Automated program repair (APR) reduces the burden of debugging by directly suggesting likely fixes for the bugs. We believe scalability| applicability| and accurate patch validation are among the main challenges for building practical APR techniques that the researchers in this area are dealing with. In this paper| we describe the steps that we are taking toward addressing these challenges.,,,10.1109/ASE.2019.00156,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952355,Program Repair;JVM Bytecode;Mutation Testing,,,,,,54,,,,,IEEE,IEEE Conferences
TsmartGP: A Tool for Finding Memory Defects with Pointer Analysis,Y. Wang; G. Chen; M. Zhou; M. Gu; J. Sun,Tsinghua University; Tsinghua University; Tsinghua University; Tsinghua University; Tsinghua University,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2019,,,1170,1173,Precise pointer analysis is desired since it is a core technique to find memory defects. There are several dimensions of pointer analysis precision| flow sensitivity| context sensitivity| field sensitivity and path sensitivity. For static analysis tools utilizing pointer analysis| considering all dimensions is difficult because the trade-off between precision and efficiency should be balanced. This paper presents TsmartGP| a static analysis tool for finding memory defects in C programs with a precise and efficient pointer analysis. The pointer analysis algorithm is flow| context| field| and quasi path sensitive. Control flow automatons are the key structures for our analysis to be flow sensitive. Function summaries are applied to get context information and elements of aggregate structures are handled to improve precision. Path conditions are used to filter unreachable paths. For efficiency| a multi-entry mechanism is proposed. Utilizing the pointer analysis algorithm| we implement a checker in TsmartGP to find uninitialized pointer errors in 13 real-world applications. Cppcheck and Clang Static Analyzer are chosen for comparison. The experimental results show that TsmartGP can find more errors while its accuracy is also higher than Cppcheck and Clang Static Analyzer.,,,10.1109/ASE.2019.00129,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952426,pointer analysis;uninitialized pointer;sensitivity;multi-entry,,,,,,12,,,,,IEEE,IEEE Conferences
TsmartGP: A Tool for Finding Memory Defects with Pointer Analysis,Y. Wang; G. Chen; M. Zhou; M. Gu; J. Sun,Tsinghua University; Tsinghua University; Tsinghua University; Tsinghua University; Tsinghua University,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2019,,,1170,1173,Precise pointer analysis is desired since it is a core technique to find memory defects. There are several dimensions of pointer analysis precision| flow sensitivity| context sensitivity| field sensitivity and path sensitivity. For static analysis tools utilizing pointer analysis| considering all dimensions is difficult because the trade-off between precision and efficiency should be balanced. This paper presents TsmartGP| a static analysis tool for finding memory defects in C programs with a precise and efficient pointer analysis. The pointer analysis algorithm is flow| context| field| and quasi path sensitive. Control flow automatons are the key structures for our analysis to be flow sensitive. Function summaries are applied to get context information and elements of aggregate structures are handled to improve precision. Path conditions are used to filter unreachable paths. For efficiency| a multi-entry mechanism is proposed. Utilizing the pointer analysis algorithm| we implement a checker in TsmartGP to find uninitialized pointer errors in 13 real-world applications. Cppcheck and Clang Static Analyzer are chosen for comparison. The experimental results show that TsmartGP can find more errors while its accuracy is also higher than Cppcheck and Clang Static Analyzer.,,,10.1109/ASE.2019.00129,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952426,test,,,,,,12,,,,,IEEE,IEEE Conferences
